swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
schemes:
- "https"
- "http"
paths:
  /patients:
    post:
      tags:
      - "Patients"
      summary: "Add a new patient to the database"
      description: ""
      operationId: "addPatient"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Patien object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/Patient"
      responses:
        "405":
          description: "Invalid input"
    get:
      tags:
      - "Patients"
      summary: "Return all Patients"
      description: ""
      operationId: "getPatients"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "Returning all Patients"
        
  /patients/{id}:
    put:
      tags:
      - "Patients"
      summary: "Update a Patient"
      description: ""
      operationId: "updatePatient"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: path
        name: id
        type: string
        description: "ID of the Patient to update"
        required: true
      - in: body
        name: patient
        schema:
          $ref: "#/definitions/Patient"
      responses:
        "404":
          description: "Patient not found"

definitions:
  Patient:
    type: "object"
    properties:
      id:
        type: "string"
      dateInfect:
        type: "integer"
        format: "epochInMilliseconds"
        example: 1606889604
      dateEnd:
        type: "integer"
        format: "epochInMilliseconds"
        example: 1607889604
      birthday:
        type: "integer"
        format: "epochInMilliseconds"
        example: 884419200
      age:
        type: integer
        format: int32
        example: 54
      gender:
        type: string
        enum:
        - W
        - M
        - U
        example: W
      preCondition:
        type: array
        items:
          type: string
        example: [Husten,Schnupfen]
      district:
        type: string
      state:
        type: string
        enum:
        - "W"
        - "NOE"
        - "OOE"
        - "SBG"
        - "T"
        - "VBG"
        - "KTN"
        - "STMK"
        - "BGLD"
        example: "OOE"