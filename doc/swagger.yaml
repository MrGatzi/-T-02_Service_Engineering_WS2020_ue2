openapi: 3.0.0
info:
  description: This is a Corona Patients Service
  version: 1.0.0-oas3
  title: CoronaPatientsService
paths:
  /patients:
    get:
      tags:
        - Patients
      summary: Retrieve all patients
      description: ''
      operationId: getPatients
      parameters:
        - in: query
          name: startBefore
          schema:
            type: integer
            format: epochInMilliseconds
            example: 1607889604
        - in: query
          name: startAfter
          schema:
            type: integer
            format: epochInMilliseconds
            example: 1607889604
        - in: query
          name: endBefore
          schema:
            type: integer
            format: epochInMilliseconds
            example: 1607889604
        - in: query
          name: endAfter
          schema:
            type: integer
            format: epochInMilliseconds
            example: 1607889604
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                  - $ref: '#/components/schemas/PatientWithId'
    post:
      tags:
        - Patients
      summary: Add a list of patients to the database
      description: ''
      operationId: postPatients
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                - $ref: '#/components/schemas/Patient'
        description: List of patients that needs to be added to the database
        required: true
      responses:
        '405':
          description: Invalid input
        200:
          description: OK
  /patient:
    post:
      tags:
        - Patient
      summary: Add a new patient to the database
      description: ''
      operationId: addPatient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
        description: Patient that should be added to the database
        required: true
      responses:
        '405':
          description: Invalid input
          
  /patient/{id}:
    put:
      tags:
        - Patient
      summary: Update a patient
      description: ''
      operationId: updatePatient
      parameters:
        - in: path
          name: id
          description: ID of the Patient to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '404':
          description: Patient not found
    get:
      tags:
        - Patient
      summary: Get a patient by id
      operationId: getPatient
      parameters:
        - in: path
          name: id
          description: ID of the Patient to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientWithId'
        '404':
          description: Patient not found
    delete:
      tags:
        - Patient
      summary: Delete a patient by id
      operationId: deletePatient
      parameters:
        - in: path
          name: id
          description: ID of the Patient to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '404':
          description: Patient not found
components:
  schemas:
    Patient:
      type: object
      properties:
        dateInfect:
          type: integer
          format: epochInMilliseconds
          example: 1606889604
        dateEnd:
          type: integer
          format: epochInMilliseconds
          example: 1607889604
        birthday:
          type: integer
          format: epochInMilliseconds
          example: 884419200
        gender:
          type: string
          enum:
            - W
            - M
            - U
          example: W
        preCondition:
          type: string
          example: Husten
        district:
          type: string
        state:
          type: string
          enum:
            - W
            - NOE
            - OOE
            - SBG
            - T
            - VBG
            - KTN
            - STMK
            - BGLD
          example: OOE
    PatientWithId:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/Patient'
       
